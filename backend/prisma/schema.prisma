// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("CUSTOMER") // ADMIN, CUSTOMER, SERVICE_PROVIDER
  nylasGrantId String? // Nylas Grant ID for service providers
  score     Int      @default(0) // User score for feature access
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  // ID of the admin who created this user

  // Relacionamento com categorias (apenas para service providers)
  serviceProviderCategories ServiceProviderCategory[]
  
  // Relacionamento com features
  userFeatures UserFeature[]
  
  // Relacionamento com environments
  environments Environment[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com service providers
  serviceProviders ServiceProviderCategory[]

  @@map("categories")
}

model ServiceProviderCategory {
  id           String   @id @default(cuid())
  serviceProviderId String
  categoryId   String
  createdAt    DateTime @default(now())

  // Relacionamentos
  serviceProvider User     @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Índice único para evitar duplicatas
  @@unique([serviceProviderId, categoryId])
  @@map("service_provider_categories")
}

model Feature {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  score       Int      @default(0) // Score mínimo necessário para habilitar
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userFeatures UserFeature[]

  @@map("features")
}

model UserFeature {
  id        String   @id @default(cuid())
  userId    String
  featureId  String
  isEnabled Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId])
  @@map("user_features")
}

model Environment {
  id        String   @id @default(cuid())
  name      String
  isIndoor  Boolean  @default(true) // true for indoor, false for outdoor
  width     Float    // width in meters
  height    Float    // height in meters (vertical dimension)
  depth     Float?   // depth in meters (optional - horizontal depth)
  userId    String   // owner of the environment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lights Light[]
  plants Plant[]

  @@map("environments")
}

model Light {
  id            String   @id @default(cuid())
  type          String   // LED, CFL, HPS, Metal Halide, LEC, T5, Sun
  watts         Float?   // watts (null for Sun)
  environmentId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("lights")
}

model Genetics {
  id          String   @id @default(cuid())
  name        String   @unique // Nome da genética (ex: "White Widow", "Blue Dream")
  description String?  // Descrição da genética
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plants Plant[]

  @@map("genetics")
}

model Plant {
  id            String   @id @default(cuid())
  code          String   @unique // Código único da planta (ex: "A001", "B002")
  description   String?  // Descrição da planta
  geneticsId    String   // Referência à genética (nome da planta)
  environmentId String   // Ambiente onde está a planta
  currentStage  String?  // Current stage: germination, clone_seedling, vegetative, flowering
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  genetics   Genetics     @relation(fields: [geneticsId], references: [id], onDelete: Cascade)
  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  history    PlantHistory[]

  @@map("plants")
}

model PlantHistory {
  id        String   @id @default(cuid())
  plantId   String
  stage     String   // germination, clone_seedling, vegetative, flowering
  notes     String?  // Observações sobre o estado
  createdAt DateTime @default(now())

  plant Plant @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@map("plant_history")
}
