# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCategoryToProviderDto {
  categoryName: String!
  description: String
}

type AuthPayload {
  access_token: String!
  user: User!
}

type Category {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input CreateCategoryDto {
  description: String
  name: String!
}

input CreateEnvironmentDto {
  depth: Float
  height: Float!
  isIndoor: Boolean!
  name: String!
  width: Float!
}

input CreateGeneticsDto {
  description: String
  name: String!
}

input CreateLightDto {
  type: String!
  watts: Float
}

input CreatePlantDto {
  description: String
  geneticsId: ID!
}

input CreatePlantHistoryDto {
  notes: String
  stage: String!
}

input CreateUserDto {
  email: String!
  firstName: String!
  lastName: String!
  nylasGrantId: String
  password: String!
  role: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Environment {
  createdAt: DateTime!
  depth: Float
  height: Float!
  id: ID!
  isIndoor: Boolean!
  name: String!
  updatedAt: DateTime!
  userId: ID!
  width: Float!
}

type Genetics {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Light {
  createdAt: DateTime!
  environmentId: ID!
  id: ID!
  type: String!
  updatedAt: DateTime!
  watts: Float
}

input LoginDto {
  email: String!
  password: String!
}

type Mutation {
  addCategoryToMe(addCategoryDto: AddCategoryToProviderDto!): ServiceProviderCategory!
  cancelBooking(bookingId: String!, configurationId: String!): String!
  confirmBooking(bookingId: String!, configurationId: String!): String!
  createBooking(configurationId: String!, customerEmail: String!, customerName: String!, endTime: String!, serviceProviderEmail: String!, startTime: String!): String!
  createCategory(createCategoryDto: CreateCategoryDto!): Category!
  createConfiguration(configurationData: String!): String!
  createEnvironment(input: CreateEnvironmentDto!): Environment!
  createGenetics(input: CreateGeneticsDto!): Genetics!
  createLight(environmentId: ID!, input: CreateLightDto!): Light!
  createPlant(environmentId: ID!, input: CreatePlantDto!): Plant!
  createPlantHistory(environmentId: ID!, input: CreatePlantHistoryDto!, plantId: ID!): PlantHistory!
  createUser(createUserDto: CreateUserDto!): User!
  deleteBooking(bookingId: String!, configurationId: String!): Boolean!
  deleteConfiguration(configurationId: String!): Boolean!
  deleteEnvironment(id: ID!): Environment!
  deleteGenetics(id: ID!): Genetics!
  deleteLight(environmentId: ID!, lightId: ID!): Light!
  deletePlant(environmentId: ID!, plantId: ID!): Plant!
  login(loginDto: LoginDto!): AuthPayload!
  removeCategoryFromMe(categoryId: String!): ServiceProviderCategory!
  removeUser(id: String!): User!
  updateBooking(bookingData: String!, bookingId: String!, configurationId: String!): String!
  updateConfiguration(configurationData: String!, configurationId: String!): String!
  updateEnvironment(id: ID!, input: UpdateEnvironmentDto!): Environment!
  updateGenetics(id: ID!, input: UpdateGeneticsDto!): Genetics!
  updateLight(environmentId: ID!, input: UpdateLightDto!, lightId: ID!): Light!
  updatePlant(environmentId: ID!, input: UpdatePlantDto!, plantId: ID!): Plant!
  updateUser(id: String!, updateUserDto: UpdateUserDto!): User!
}

type Plant {
  code: String!
  createdAt: DateTime!
  description: String
  environmentId: ID!
  genetics: Genetics
  geneticsId: ID!
  id: ID!
  updatedAt: DateTime!
}

type PlantHistory {
  createdAt: DateTime!
  id: ID!
  notes: String
  plantId: ID!
  stage: String!
}

type Query {
  categories: [Category!]!
  category(id: String!): Category!
  customers: [User!]!
  getAllGenetics: [Genetics!]!
  getAvailability(configurationId: String!, endTime: String!, serviceProviderEmail: String!, startTime: String!): String!
  getBooking(bookingId: String!, configurationId: String!): String!
  getConfiguration(configurationId: String!): String!
  getEnvironment(id: ID!): Environment!
  getGeneticsById(id: ID!): Genetics!
  getLightsByEnvironment(environmentId: ID!): [Light!]!
  getMyBookings(configurationId: String!, limit: Float! = 20, pageToken: String): String!
  getMyConfigurations: String!
  getMyEnvironments: [Environment!]!
  getPlantById(environmentId: ID!, plantId: ID!): Plant!
  getPlantHistory(environmentId: ID!, plantId: ID!): [PlantHistory!]!
  getPlantsByEnvironment(environmentId: ID!): [Plant!]!
  getProviderConfigurations(providerEmail: String!): String!
  getServiceProvidersByCategory(categoryId: String!): String!
  isFeatureEnabled(featureName: String!): Boolean!
  me: User!
  myCategories: [Category!]!
  myCategoryRelations: [ServiceProviderCategory!]!
  serviceProviders: [User!]!
  testFeature: String!
  user(id: String!): User!
  users: [User!]!
}

type ServiceProviderCategory {
  category: Category!
  categoryId: String!
  createdAt: DateTime!
  id: ID!
  serviceProvider: User!
  serviceProviderId: String!
}

input UpdateEnvironmentDto {
  depth: Float
  height: Float
  isIndoor: Boolean
  name: String
  width: Float
}

input UpdateGeneticsDto {
  description: String
  name: String
}

input UpdateLightDto {
  type: String
  watts: Float
}

input UpdatePlantDto {
  description: String
  geneticsId: ID
}

input UpdateUserDto {
  email: String
  firstName: String
  lastName: String
  nylasGrantId: String
  password: String
  role: String
}

type User {
  createdAt: DateTime!
  createdBy: String
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  nylasGrantId: String
  role: String!
  updatedAt: DateTime!
}